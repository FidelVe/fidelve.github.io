{"version":3,"sources":["webpack:///./src/pages/freecodecamp/javascript-algorithms-and-data-structures/collapse-container.js"],"names":["CollapseContainer","props","onHeaderClick","event","setState","isOpen","state","componentRef","React","createRef","staticState","isInitialRender","headerHeight","contentHeight","uncollapseHeight","componentDidMount","this","current","children","headerEl","contentEl","console","log","clientHeight","scrollHeight","render","elementInlineStyle","maxHeight","ref","className","styles","collapseContainer","style","onClick","collapseHeader","headerText","headerImgContainer","open","collapseContent","Component","defaultProps"],"mappings":"0JAKMA,E,oBACJ,WAAYC,GAAQ,IAAD,SAGjB,cAAMA,IAAN,MAeFC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAACC,QAAS,EAAKC,MAAMD,UAfnC,EAAKE,aAAeC,IAAMC,YAC1B,EAAKH,MAAQ,CACXD,QAAQ,GAEV,EAAKK,YAAc,CACjBC,iBAAiB,EAGjBC,cAAc,EACdC,eAAe,EACfC,kBAAkB,GAdH,E,kHAsBnBC,kBAAA,WAAoB,MAEUC,KAAKT,aAAaU,QAAQC,SAAjDC,EAFa,KAEHC,EAFG,KAGlBC,QAAQC,IAAR,sBAAkCF,EAAUG,cAExCP,KAAKN,YAAYG,gBAAkBO,EAAUI,eAG/CR,KAAKN,YAAYG,cAAgBO,EAAUI,aAC3CR,KAAKN,YAAYE,aAAeO,EAASK,aAMzCR,KAAKN,YAAYI,iBACfE,KAAKN,YAAYG,cAAgBG,KAAKN,YAAYE,aAAe,IAE/DI,KAAKN,YAAYC,kBAEnBK,KAAKN,YAAYC,iBAAkB,K,EAKzCc,OAAA,WACE,IAAMC,EAAqBV,KAAKN,YAAYC,gBAIxC,GAGFK,KAAKV,MAAMD,OACT,CAACsB,UAAcX,KAAKN,YAAYI,iBAAtB,MACV,CAACa,UAAcX,KAAKN,YAAYE,aAAtB,MAEd,OACE,6BACEgB,IAAKZ,KAAKT,aACVsB,UAAWC,IAAOC,kBAClBC,MAAON,GACP,4BAAQO,QAASjB,KAAKd,cAAe2B,UAAWC,IAAOI,gBACrD,4BAAKlB,KAAKf,MAAMkC,YACfnB,KAAKV,MAAMD,OACV,yBACEwB,UAAcC,IAAOM,mBAAZ,IAAkCN,IAAOO,OAEpD,yBAAKR,UAAWC,IAAOM,sBAG3B,6BAASP,UAAWC,IAAOQ,iBACxBtB,KAAKf,MAAMiB,Y,GA3EUV,IAAM+B,WAkFtCvC,EAAkBwC,aAAe,CAC/BL,WAAY,qCAGCnC","file":"component---src-pages-freecodecamp-javascript-algorithms-and-data-structures-collapse-container-js-1af7c540d1da8e894c47.js","sourcesContent":["import React from 'react';\nimport {StaticQuery, graphql} from 'gatsby';\nimport Img from 'gatsby-image';\nimport styles from './collapse-container.module.css';\n\nclass CollapseContainer extends React.Component {\n  constructor(props) {\n    // The ref might not be necessary, I guess I can just delete it?\n    // headerText=\"header for the collapsible container\"\n    super(props);\n    this.componentRef = React.createRef();\n    this.state = {\n      isOpen: false,\n    };\n    this.staticState = {\n      isInitialRender: true,\n      // Computed Height of header and content elements inside the collapsible\n      // container\n      headerHeight: false,\n      contentHeight: false,\n      uncollapseHeight: false,\n    };\n  }\n\n  onHeaderClick = event => {\n    this.setState({isOpen: !this.state.isOpen});\n  };\n\n  componentDidMount() {\n    // Get the updated scroll sizes\n    let [headerEl, contentEl] = this.componentRef.current.children;\n    console.log(`componentDidMount: ${contentEl.clientHeight}`);\n\n    if (this.staticState.contentHeight !== contentEl.scrollHeight) {\n      // console.log(this.staticState.contentHeight, contentEl.scrollHeight);\n      // update the header and content height\n      this.staticState.contentHeight = contentEl.scrollHeight;\n      this.staticState.headerHeight = headerEl.scrollHeight;\n\n      // update the  uncollapsed height. I'm adding 1000px and using\n      // max-height instead of height because if I dont the height doesn't\n      // updates on resize correctly. In the css file the transition is\n      // on max-height instead of height also.\n      this.staticState.uncollapseHeight =\n        this.staticState.contentHeight + this.staticState.headerHeight + 1000;\n\n      if (this.staticState.isInitialRender) {\n        // if this is the initial rendering\n        this.staticState.isInitialRender = false;\n      }\n    }\n  }\n\n  render() {\n    const elementInlineStyle = this.staticState.isInitialRender\n      ? // If this is the first render() am passsing an empty object\n        // The initial height is declared in collapse-container.module.css\n        // This is to ensure that the containers initial state is collapsed\n        {}\n      : // If is not the first render() we check if is collapsed or not\n      // and adjust the height accordingly\n      this.state.isOpen\n      ? {maxHeight: `${this.staticState.uncollapseHeight}px`}\n      : {maxHeight: `${this.staticState.headerHeight}px`};\n\n    return (\n      <section\n        ref={this.componentRef}\n        className={styles.collapseContainer}\n        style={elementInlineStyle}>\n        <header onClick={this.onHeaderClick} className={styles.collapseHeader}>\n          <h3>{this.props.headerText}</h3>\n          {this.state.isOpen ? (\n            <div\n              className={`${styles.headerImgContainer} ${styles.open}`}></div>\n          ) : (\n            <div className={styles.headerImgContainer}></div>\n          )}\n        </header>\n        <article className={styles.collapseContent}>\n          {this.props.children}\n        </article>\n      </section>\n    );\n  }\n}\n\nCollapseContainer.defaultProps = {\n  headerText: 'default value for the header text',\n};\n\nexport default CollapseContainer;\n"],"sourceRoot":""}