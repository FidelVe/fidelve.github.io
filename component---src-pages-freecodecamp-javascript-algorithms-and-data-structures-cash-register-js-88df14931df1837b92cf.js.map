{"version":3,"sources":["webpack:///./src/pages/freecodecamp/javascript-algorithms-and-data-structures/cash-register.js","webpack:///./src/components/collapse-container.js","webpack:///./src/assets/color-scheme.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/es6.number.is-nan.js","webpack:///./src/components/money-input.js","webpack:///./src/components/cash-register-app.js"],"names":["IndexPage","props","pageTitle","headerText","className","fluid","data","fccLogo","childImageSharp","alt","query","LARGE_HEIGHT","LARGE_FONT","SMALL_HEIGHT","SMALL_FONT","HeaderContainer","headerStyle","headerTextStyle","headerIconStyle","onHeaderClick","styleClass","iconClassName","headerAltChildren","style","onClick","collapseHeader","headerLabel","CollapseContainer","createBaseParams","params","initialRender","maxHeightWhenCollapsed","maxHeightWhenUncollapsed","large","event","setState","isOpen","state","calculateInitialInlineStyles","getInlineStyle","inlineStyles","mainStyle","maxHeight","baseParams","headerIcon","contentStyle","styledBorder","borderTop","borderColor","border","headerImgSize","parseInt","width","height","backgroundSize","fontSize","componentRef","React","createRef","componentDidUpdate","componentDidMount","contentEl","this","current","children","computedContentStyle","getComputedStyle","getPropertyValue","render","contentInlineStyle","headerInlineStyle","mainInlineStyle","styles","headerImgContainer","open","ref","collapseContainer","collapseContent","Component","defaultProps","COLORS","sand","main","shade","tint","complementary","triadic","first","second","splitComplementary","analogous","tetradic","third","global","has","cof","inheritIfRequired","toPrimitive","fails","gOPN","f","gOPD","dP","$trim","trim","$Number","Base","proto","prototype","BROKEN_COF","TRIM","String","toNumber","argument","it","length","radix","maxCode","charCodeAt","NaN","code","digits","slice","i","l","value","arguments","that","valueOf","call","key","keys","split","j","constructor","$export","S","isNaN","number","P_STYLE","margin","MoneyInput","isCents","input","action","label","disable","step","unit","unitLabel","onInputChange","e","newInputValue","parseFloat","target","minValue","parsedInput","Math","round","parsedMinValue","validateInput","console","log","getAttribute","container","innerContainer","type","min","onChange","disabled","COLOR","LABELS","DEFAULT_REGISTER","amount","isCoin","LEGEND_STYLE","backgroundColor","lineHeight","borderRadius","padding","BUTTON_STYLE","COLL_CONT_STYLE","CashRegisterApp","useState","createCashState","cashInRegister","setCashInRegister","change","setChange","updatedCashInRegister","setUpdatedCashInRegister","price","setPrice","payment","setPayment","updateCash","childData","obj","update","newObj","oldValue","newValue","maxWidth","marginBottom","container3","container1","container2","validateCashInput","button","changeState","registerState","changeAmount","toTwoDecimalPoints","outputChangeState","outputRegisterState","minimizedState","totalAmount","forEach","copyOfRegisterState","copyOfChange","bills","returnedCash","bill","tempTotalAmount","eachBill","multiplier","floor","amountToAddAndSubstract","map","each","makeTransaction","rawChangeState","rawRegisterNewState","wrapperForMakeTransaction","alert","array","lastChar","parsedValue","Number","toString","returnEmpty","tempObj","num"],"mappings":"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","file":"component---src-pages-freecodecamp-javascript-algorithms-and-data-structures-cash-register-js-88df14931df1837b92cf.js","sourcesContent":["import React from 'react';\nimport {graphql} from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport Layout from '../../../components/layout';\nimport CashRegisterApp from '../../../components/cash-register-app';\n// import Image from \"../components/image\"\n// import SEO from \"../components/seo\"\n\nconst IndexPage = props => (\n  <Layout pageTitle={'FidelVe | FreeCodeCamp'} headerText=\"Cash Register\">\n    {/* <SEO title=\"Home\" /> */}\n    <div className=\"image-container\">\n      <Img fluid={props.data.fccLogo.childImageSharp.fluid} alt=\" FCC logo\" />\n    </div>\n    <CashRegisterApp />\n  </Layout>\n);\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query {\n    fccLogo: file(relativePath: {eq: \"freecodecamp-logo.png\"}) {\n      childImageSharp {\n        fluid(maxWidth: 400) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport styles from './collapse-container.module.css';\n\n// constant declarations\nconst LARGE_HEIGHT = '58px';\nconst LARGE_FONT = '20px';\nconst SMALL_HEIGHT = '34px';\nconst SMALL_FONT = '15px';\n\nconst HeaderContainer = props => {\n  const {\n    headerStyle,\n    headerTextStyle,\n    headerIconStyle,\n    onHeaderClick,\n    styleClass,\n    headerText,\n    iconClassName,\n    headerAltChildren,\n  } = props;\n  return (\n    <header\n      style={headerStyle}\n      onClick={onHeaderClick}\n      className={styleClass.collapseHeader}>\n      <div>\n        <p style={headerTextStyle} className={styleClass.headerLabel}>\n          {headerText}\n        </p>\n        {headerAltChildren || null}\n      </div>\n      <div style={headerIconStyle} className={iconClassName}></div>\n    </header>\n  );\n};\n\nclass CollapseContainer extends React.Component {\n  /*\n   * Props available for this component:\n   *  - headerText: 'default value for the header text',\n   *  - styledBorder: true,\n   *  - borderColor: '#000',\n   *  - large: true,\n   *  - headerInlineStyle: {}\n   *  - contentInlineStyle: {}\n   *  - mainInlineStyle: {},\n   */\n  constructor(props) {\n    super(props);\n    // create ref for <section />\n    this.componentRef = React.createRef();\n\n    // Initial React component state\n    this.state = {\n      isOpen: false,\n    };\n\n    this.baseParams = this.createBaseParams(props);\n  }\n\n  createBaseParams = props => {\n    let params = {\n      initialRender: true,\n      maxHeightWhenCollapsed: '',\n      maxHeightWhenUncollapsed: '',\n    };\n\n    params.maxHeightWhenCollapsed =\n      props.large === true ? LARGE_HEIGHT : SMALL_HEIGHT;\n\n    return params;\n  };\n\n  onHeaderClick = event => {\n    // State change\n    this.setState({isOpen: !this.state.isOpen});\n  };\n\n  calculateInitialInlineStyles = () => {};\n\n  getInlineStyle = () => {\n    // Initializing 'inlineStyles' object\n    let inlineStyles = {\n      mainStyle: {\n        // maxHeight\n        // borderColor\n        // borderTop\n      },\n      headerStyle: {\n        maxHeight: this.baseParams.maxHeightWhenCollapsed,\n      },\n      headerText: {\n        // fontSize\n      },\n      headerIcon: {\n        // width\n        // height\n        // background-size\n      },\n      contentStyle: {},\n    };\n\n    // ********************\n    // these only need to be calculated once, before the first render\n    // TODO: optimize the code, put the calculations in another function and\n    // only do them once\n    // Border Style preferences\n    if (!this.props.styledBorder) {\n      inlineStyles.mainStyle.border = 'none';\n    } else {\n      inlineStyles.mainStyle.borderTop = `solid 5px ${this.props.borderColor}`;\n    }\n\n    // Header img size calculations\n    let headerImgSize = parseInt(this.baseParams.maxHeightWhenCollapsed) - 4;\n\n    inlineStyles.headerIcon = {\n      width: `${headerImgSize - 8}px`,\n      height: `${headerImgSize - 8}px`,\n      backgroundSize: `${headerImgSize}px ${headerImgSize}px`,\n    };\n\n    // Header label calculations\n    inlineStyles.headerText.fontSize =\n      this.props.large === true ? LARGE_FONT : SMALL_FONT;\n    // ********************\n\n    // Set the maxHeight depending on the state (collapsed/uncollapsed)\n    inlineStyles.mainStyle.maxHeight = this.state.isOpen\n      ? this.baseParams.maxHeightWhenUncollapsed\n      : this.baseParams.maxHeightWhenCollapsed;\n\n    return inlineStyles;\n  };\n\n  componentDidUpdate() {}\n  componentDidMount() {\n    // Get the elements from the DOM\n    let contentEl = this.componentRef.current.children[1];\n\n    // Get the computed style of element after being mounted in DOM\n    let computedContentStyle = getComputedStyle(contentEl);\n\n    // This is the maximum height for the collapse container, it will depend\n    // on the content of itself + and extra margin for handling browser\n    // resize.\n    this.baseParams.maxHeightWhenUncollapsed =\n      parseInt(computedContentStyle.getPropertyValue('height')) * 2;\n  }\n\n  render() {\n    // Get inline styles for the elements\n    const {\n      headerStyle,\n      contentStyle,\n      headerIcon,\n      headerText,\n      mainStyle,\n    } = this.getInlineStyle();\n\n    // Get calculated inline styles for the header and content styles, and\n    // override with custom values passed as props (if any is passed)\n    const contentInlineStyle = {\n      ...contentStyle,\n      ...this.props.contentInlineStyle,\n    };\n    const headerInlineStyle = {\n      ...headerStyle,\n      ...this.props.headerInlineStyle,\n    };\n\n    const mainInlineStyle = {\n      ...mainStyle,\n      ...this.props.mainInlineStyle,\n    };\n\n    const iconClassName = this.state.isOpen\n      ? `${styles.headerImgContainer} ${styles.open}`\n      : styles.headerImgContainer;\n\n    return (\n      <section\n        ref={this.componentRef}\n        className={styles.collapseContainer}\n        style={mainInlineStyle}>\n        <HeaderContainer\n          headerStyle={headerInlineStyle}\n          headerTextStyle={headerText}\n          headerIconStyle={headerIcon}\n          styleClass={styles}\n          onHeaderClick={this.onHeaderClick}\n          headerText={this.props.headerText}\n          iconClassName={iconClassName}\n        />\n        <article style={contentInlineStyle} className={styles.collapseContent}>\n          {this.props.children}\n        </article>\n      </section>\n    );\n  }\n}\n\nCollapseContainer.defaultProps = {\n  headerText: 'default value for the header text',\n  styledBorder: true,\n  borderColor: '#000',\n  large: true,\n  headerInlineStyle: {},\n  contentInlineStyle: {},\n  mainInlineStyle: {},\n};\n\nexport default CollapseContainer;\n","/*\n * Color scheme for the site\n */\n// const COLORS = {\n//   // Sand Color scheme\n//   main: '#c2b280',\n//   mainShade: '#483f22',\n//   mainTint: '#e2dac2',\n//   triadicOne: '#80c2b2',\n//   triadicOneShade: '#29554a',\n//   triadicOneTint: '#c2e2da',\n//   triadicTwo: '#b280c2',\n//   triadicTwoShade: '#4a2955',\n//   triadicTwoTint: '#dac2e2',\n// };\nconst COLORS = {\n  sand: {\n    main: '#c2b280',\n    shade: '#483f22',\n    tint: '#e2dac2',\n    complementary: {\n      main: '#8090c2',\n      shade: '#222c48',\n      tint: '#c2cae2',\n    },\n    triadic: {\n      first: {main: '#80c2b2', shade: '#22483f', tint: '#c2e2da'},\n      second: {main: '#b280c2', shade: '#4a2955', tint: '#dac2e2'},\n    },\n    splitComplementary: {\n      first: {main: '#9180c2', shade: '#2c2248', tint: '#cac2e2'},\n      second: {main: '#80b1c2', shade: '#223e48', tint: '#c2dae2'},\n    },\n    analogous: {\n      first: {main: '#c29180', shade: '#482c22', tint: '#e2cac2'},\n      second: {main: '#b1c280', shade: '#3e4822', tint: '#dae2c2'},\n    },\n    tetradic: {\n      first: {main: '#c28090', shade: '#48222c', tint: '#e2c2ca'},\n      second: {main: '#80c2b2', shade: '#22483f', tint: '#c2e2da'},\n      third: {main: '#8090c2', shade: '#222c48', tint: '#c2cae2'},\n    },\n  },\n};\n\nexport default COLORS;\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","/*\n * MoneyInput component, part of Cash Register App.\n * This is a stateless component, the input state is saved\n * in the parent component.\n * */\nimport React from 'react';\n// import {useState} from 'react';\nimport style from './money-input.module.css';\n\n// Inline Styles\nconst P_STYLE = {\n  margin: '0px 4px',\n};\n\nconst MoneyInput = ({value, isCents, input, action, label, disable}) => {\n  const step = isCents ? parseInt(value) / 100 : parseInt(value);\n  const unit = isCents ? 'coins' : 'bills';\n  const unitLabel = isCents ? '\\u00A2' : '\\u0024';\n\n  //component state\n  // const [inputValue, setInputValue] = useState(parseFloat(input));\n\n  const onInputChange = e => {\n    let newInputValue = parseFloat(e.target.value);\n    let parsedStep = parseFloat(step);\n\n    if (validateInput(newInputValue, parsedStep)) {\n      // Set internal state\n      // setInputValue(newInputValue);\n      // Pass data to parent\n      action({\n        label: e.target.getAttribute('label'),\n        value: newInputValue,\n      });\n    } else {\n      console.log('not valid number');\n    }\n  };\n\n  return (\n    <div className={style.container}>\n      <p style={P_STYLE}>Amount in</p>\n      <p style={P_STYLE}>{`${unitLabel}${value} ${unit}`}</p>\n      <div className={style.innerContainer}>\n        &#36;:\n        {disable ? (\n          <input\n            label={label}\n            type=\"number\"\n            min=\"0\"\n            step={`${step}`}\n            value={input}\n            onChange={onInputChange}\n            disabled\n          />\n        ) : (\n          <input\n            label={label}\n            type=\"number\"\n            min=\"0\"\n            step={`${step}`}\n            value={input}\n            onChange={onInputChange}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction validateInput(input, minValue) {\n  let parsedInput = Math.round(100 * input);\n  let parsedMinValue = Math.round(100 * minValue);\n  return parsedInput % parsedMinValue === 0 ? true : false;\n}\nMoneyInput.defaultProps = {\n  input: 0,\n  disable: false,\n};\nexport default MoneyInput;\n","/*\n * Simple Cash Register App.\n * Takes price of product, payment in cash and amount of money in cash inside\n * the register. It calculates the change due to the client, if the transaction\n * can be made or not (depending if the cash in the register is enough for the\n * change) and the new register cash state (how many bills and coins of each\n * denomination are left)\n * */\nimport React from 'react';\nimport {useState} from 'react';\nimport style from './cash-register-app.module.css';\nimport CollapseContainer from './collapse-container';\nimport MoneyInput from './money-input';\nimport COLORS from '../assets/color-scheme';\n\n// Main Color to use\nconst COLOR = COLORS.sand;\n\n// Contants declaration\nconst LABELS = [\n  'hundred',\n  'fifty',\n  'twenty',\n  'ten',\n  'five',\n  'one',\n  'quarter',\n  'dime',\n  'nickel',\n  'cent',\n];\nconst DEFAULT_REGISTER = [\n  {label: LABELS[0], value: '100', amount: '200', isCoin: false},\n  {label: LABELS[1], value: '50', amount: '150', isCoin: false},\n  {label: LABELS[2], value: '20', amount: '120', isCoin: false},\n  {label: LABELS[3], value: '10', amount: '70', isCoin: false},\n  {label: LABELS[4], value: '5', amount: '85', isCoin: false},\n  {label: LABELS[5], value: '1', amount: '42', isCoin: false},\n  {label: LABELS[6], value: '25', amount: '4.25', isCoin: true},\n  {label: LABELS[7], value: '10', amount: '3.1', isCoin: true},\n  {label: LABELS[8], value: '5', amount: '5.05', isCoin: true},\n  {label: LABELS[9], value: '1', amount: '3.11', isCoin: true},\n];\nconst LEGEND_STYLE = {\n  backgroundColor: '#fff',\n  fontSize: '12px',\n  lineHeight: '14px',\n  borderRadius: '2px',\n  padding: '0px 2px',\n};\nconst BUTTON_STYLE = {\n  // border: 'solid thin black',\n  // borderRadius: '2px',\n  // backgroundColor: COLOR.splitComplementary.second.tint,\n  // color: '#000',\n};\n// Collapse inner content style\nconst COLL_CONT_STYLE = {}; //{padding: '6px 0px'};\n\nconst CashRegisterApp = props => {\n  /*\n   * This is a component that simulates a Cash Register.\n   * The Cash Register has an amount of bills of various denominations inside\n   * and makes transactions. It takes a payment amount and a price, it\n   * calculates the change that it needs to returns and based on the amount\n   * of cash it has inside, it returns the exact change.\n   */\n  // Component state\n  const [cashInRegister, setCashInRegister] = useState(createCashState());\n  const [change, setChange] = useState(createCashState(true));\n  const [updatedCashInRegister, setUpdatedCashInRegister] = useState(\n    createCashState(true),\n  );\n  const [price, setPrice] = useState('');\n  const [payment, setPayment] = useState('');\n\n  const updateCash = childData => {\n    /*\n     * Ex:\n     * childData = {label: \"one\" value: 10}\n     */\n    return updateObject(cashInRegister, childData);\n  };\n\n  const onCalculate = () => {\n    // Takes the price, payment and cashInRegister states and calculates\n    // the client change, and new state for the register\n    let changeState = createCashState(true);\n    let registerState = {...cashInRegister};\n    let changeAmount = toTwoDecimalPoints(payment - price);\n    // Math.round((parseFloat(payment) - parseFloat(price)) * 100) / 100;\n\n    if (changeAmount > 0 && changeAmount < registerState.amount) {\n      // if the payment entered by the user is bigger than the price and\n      // the amount in the register is bigger than the payment, the\n      // transaction is valid\n      [changeState, registerState] = wrapperForMakeTransaction(\n        changeAmount,\n        registerState,\n      );\n\n      setChange(changeState);\n      setUpdatedCashInRegister(registerState);\n    } else {\n      alert(\n        'Payment cannot be processed: Payment should be bigger than the price and less than the amount in the register',\n      );\n    }\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: '#eee', //COLOR.tint,\n        borderColor: COLOR.shade,\n        maxWidth: '670px',\n        margin: '6px auto',\n      }}\n      className={style.container}>\n      <fieldset style={{marginBottom: '4px'}}>\n        <legend style={LEGEND_STYLE}>Input:</legend>\n        <div className={style.container3}>\n          <div\n            style={{\n              backgroundColor: COLOR.splitComplementary.second.main,\n              margin: '4px 0px',\n            }}\n            className={style.container1}>\n            <div className={style.container2}>\n              <h5>Price:</h5>\n              <input\n                type=\"text\"\n                value={price}\n                onChange={e => setPrice(validateCashInput(e.target.value))}\n              />\n            </div>\n            <div className={style.container2}>\n              <h5>Payment:</h5>\n              <input\n                type=\"text\"\n                value={payment}\n                onChange={e => setPayment(validateCashInput(e.target.value))}\n              />\n            </div>\n            <div className={style.container2}>\n              <button\n                style={BUTTON_STYLE}\n                className={style.button}\n                onClick={onCalculate}>\n                Calculate\n              </button>\n            </div>\n          </div>\n          <CollapseContainer\n            large={false}\n            styledBorder={false}\n            headerText={`Cash in register: $${toTwoDecimalPoints(\n              cashInRegister.amount,\n            )}`}\n            mainInlineStyle={{\n              backgroundColor: COLOR.splitComplementary.second.main,\n              marginBottom: '4px',\n            }}\n            contentInlineStyle={COLL_CONT_STYLE}>\n            <div className={style.collapseContent}>\n              {LABELS.map((label, key) => (\n                <MoneyInput\n                  label={label}\n                  action={data => setCashInRegister(updateCash(data))}\n                  key={label}\n                  value={cashInRegister[label].value}\n                  isCents={cashInRegister[label].isCoin}\n                  input={toTwoDecimalPoints(cashInRegister[label].amount)}\n                />\n              ))}\n            </div>\n          </CollapseContainer>\n        </div>\n      </fieldset>\n      <fieldset style={{marginBottom: '4px'}}>\n        <legend style={LEGEND_STYLE}>Result:</legend>\n        <div className={style.container1}>\n          {[\n            ['Client change:', change],\n            ['New cash in Register:', updatedCashInRegister],\n          ].map((array, key) => (\n            <CollapseContainer\n              key={key}\n              large={false}\n              styledBorder={false}\n              headerText={`${array[0]} $${toTwoDecimalPoints(array[1].amount)}`}\n              mainInlineStyle={{\n                backgroundColor: COLOR.splitComplementary.second.main,\n                marginBottom: '4px',\n              }}\n              contentStyle={COLL_CONT_STYLE}>\n              <div className={style.collapseContent}>\n                {LABELS.map((label, key) => (\n                  <MoneyInput\n                    label={label}\n                    action={data => null}\n                    key={label}\n                    value={array[1][label].value}\n                    isCents={array[1][label].isCoin}\n                    input={array[1][label].amount}\n                    disable={true}\n                  />\n                ))}\n              </div>\n            </CollapseContainer>\n          ))}\n        </div>\n      </fieldset>\n      {/* <hr className={style.hr} /> */}\n      <div className={style.container1}></div>\n    </div>\n  );\n};\n\nCashRegisterApp.defaultProps = {};\n\nfunction validateCashInput(value) {\n  // Validates input to only accept numbers, either integer or decimal\n  // This functions returns a string in order to keep the decimal point\n  // if the user adds it\n\n  // This compensates for the fact that parseFloat() eliminates trailing zeros\n  const lastChar =\n    value[value.length - 1] === '.'\n      ? '.'\n      : value[value.length - 2] === '.' && value[value.length - 1] === '0'\n      ? '.0'\n      : '';\n\n  const parsedValue = parseFloat(value);\n  if (Number.isNaN(parsedValue)) {\n    return '';\n  }\n  return parsedValue.toString() + lastChar;\n}\n\nfunction createCashState(returnEmpty = false) {\n  let state = {\n    amount: 0,\n    state: '',\n  };\n\n  for (let obj of DEFAULT_REGISTER) {\n    let tempObj = {};\n    tempObj.value = obj.value;\n    tempObj.isCoin = obj.isCoin;\n    if (!returnEmpty) {\n      tempObj.amount = obj.amount;\n      state.amount += parseFloat(obj.amount);\n    } else {\n      tempObj.amount = 0;\n    }\n    state[obj.label] = tempObj;\n  }\n\n  return state;\n}\n\nfunction toTwoDecimalPoints(num) {\n  return Math.round(parseFloat(num) * 100) / 100;\n}\n\nfunction updateObject(obj, update) {\n  let newObj = {...obj};\n  let oldValue = parseFloat(newObj[update.label].amount);\n  let newValue = parseFloat(update.value);\n\n  newObj.amount = `${parseFloat(newObj.amount) - oldValue + newValue}`;\n  newObj[update.label].amount = `${newValue}`;\n\n  return newObj;\n}\n\nfunction wrapperForMakeTransaction(change, state) {\n  /* This is a wrapper to format the cash register data into an object\n   * in the correct format for makeTransaction().\n   * This is to avoid refactorin makeTransaction() and make it reusable.\n   */\n  // creating blank change and register states\n  let outputChangeState = createCashState(true);\n  let outputRegisterState = createCashState(true);\n\n  // Creating a minimized state in the appropiate format to serve\n  // as input to makeTransaction()\n  let minimizedState = {totalAmount: state.amount};\n  LABELS.forEach(\n    label => (minimizedState[label] = toTwoDecimalPoints(state[label].amount)),\n  );\n\n  // Calculating the change and the register new state\n  let [rawChangeState, rawRegisterNewState] = makeTransaction(\n    change,\n    minimizedState,\n  );\n\n  // Updating outputChangeState and outputRegisterState\n  if (rawChangeState && rawRegisterNewState !== null) {\n    outputChangeState.amount = rawChangeState.totalAmount;\n    outputRegisterState.amount = rawRegisterNewState.totalAmount;\n\n    LABELS.forEach(label => {\n      outputChangeState[label].amount = rawChangeState[label];\n      outputRegisterState[label].amount = rawRegisterNewState[label];\n    });\n  } else {\n    [outputRegisterState, outputChangeState] = [null, null];\n  }\n\n  return [outputChangeState, outputRegisterState];\n}\n\nfunction makeTransaction(change, registerState) {\n  /*\n   * This functions takes an amount to return (change) and a state\n   * (registerState) and calculates if the change can be returned or not.\n   * The object format for the registerState is as follow:\n   * const REGISTER_STATE = {\n   *   totalAmount: int,\n   *   hundred: int,\n   *   fifty: int,\n   *   twenty: int,\n   *   ten: int,\n   *   five: int,\n   *   one: int,\n   * };\n   */\n  // Making a copy of the inputs that we are going to mutate, to make\n  // sure this is a pure function\n  let copyOfRegisterState = {...registerState};\n  let copyOfChange = change;\n\n  // An ordered array of bill denomination from higher to lowest\n  const bills = [\n    ['hundred', 100],\n    ['fifty', 50],\n    ['twenty', 20],\n    ['ten', 10],\n    ['five', 5],\n    ['one', 1],\n    ['quarter', 0.25],\n    ['dime', 0.1],\n    ['nickel', 0.05],\n    ['cent', 0.01],\n  ];\n\n  // Initializing the object we are going to return\n  let returnedCash = {totalAmount: 0};\n  bills.forEach(bill => (returnedCash[bill[0]] = 0));\n  // { hundred: 0, fifty: 0, twenty: 0, ten: 0, five: 0,\n  // one: 0, quarter: 0, dime: 0, nickel: 0, cent: 0 };\n\n  if (copyOfChange <= copyOfRegisterState.totalAmount) {\n    // Making sure we have enough money for the transaction\n\n    if (copyOfChange === copyOfRegisterState.totalAmount) {\n      // If the change to return is the same amount inside the register\n      return copyOfRegisterState;\n    }\n\n    // Temp variable to calculate the register's new totalAmount state\n    let tempTotalAmount = 0;\n\n    for (let eachBill of bills) {\n      // Going from highest denomination to lower\n\n      if (eachBill[1] <= copyOfChange) {\n        // If the current bill value is smaller than the change to return\n\n        let multiplier = Math.floor(copyOfChange / eachBill[1]);\n        // This multiplier handles coins (value<1) and bills (value >=1)\n        // let multiplier =\n        //   eachBill[1] >= 1\n        //     ? Math.floor(copyOfChange / eachBill[1])\n        //     : Math.floor(copyOfChange / eachBill[1]) -\n        //       Math.floor(Math.floor(copyOfChange) / eachBill[1]);\n\n        let amountToAddAndSubstract =\n          eachBill[1] * multiplier < copyOfRegisterState[eachBill[0]]\n            ? eachBill[1] * multiplier\n            : copyOfRegisterState[eachBill[0]];\n\n        // Updating variables by substracting or adding the transaction\n        // substracting\n        [copyOfRegisterState[eachBill[0]], copyOfChange] = [\n          copyOfRegisterState[eachBill[0]],\n          copyOfChange,\n        ].map(each => toTwoDecimalPoints(each - amountToAddAndSubstract));\n        // Adding\n        [returnedCash[eachBill[0]], returnedCash.totalAmount] = [\n          returnedCash[eachBill[0]],\n          returnedCash.totalAmount,\n        ].map(each => toTwoDecimalPoints(each + amountToAddAndSubstract));\n      }\n\n      // Adding up the updated state for each denomination\n      tempTotalAmount += copyOfRegisterState[eachBill[0]];\n    }\n\n    // The new register total amount is the sum of the updated state for\n    // each denomination after substracting value from them\n    copyOfRegisterState.totalAmount = tempTotalAmount;\n\n    if (returnedCash.totalAmount === change) {\n      // If we have the right combination of each bill to return\n      // the exact change, we return it.\n      return [returnedCash, copyOfRegisterState];\n    }\n  }\n\n  // If we get to this point the amount of cash cannot be returned\n  // we either dont have enough money or the combination of bills\n  // we have cannot be combined to return the requested amount\n  return [null, null];\n}\n\nexport default CashRegisterApp;\n"],"sourceRoot":""}