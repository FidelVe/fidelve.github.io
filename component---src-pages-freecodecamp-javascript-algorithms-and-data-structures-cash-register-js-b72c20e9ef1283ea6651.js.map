{"version":3,"sources":["webpack:///./src/components/cash-register-app.js","webpack:///./src/pages/freecodecamp/javascript-algorithms-and-data-structures/cash-register.js","webpack:///./src/components/collapse-container.js"],"names":["CashRegisterApp","props","useState","className","style","container","innerContainer","innerContainer1","type","large","styledBorder","headerText","defaultProps","IndexPage","pageTitle","fluid","data","fccLogo","childImageSharp","alt","query","LARGE_HEIGHT","LARGE_FONT","SMALL_HEIGHT","SMALL_FONT","CollapseContainer","createBaseParams","params","initialRender","maxHeightWhenCollapsed","maxHeightWhenUncollapsed","onHeaderClick","event","setState","isOpen","state","calculateInitialInlineStyles","getInlineStyle","inlineStyles","main","header","maxHeight","baseParams","headerIcon","content","borderTop","borderColor","border","headerImgSize","parseInt","width","height","backgroundSize","fontSize","componentRef","React","createRef","componentDidUpdate","componentDidMount","contentEl","this","current","children","contentStyle","getComputedStyle","getPropertyValue","render","iconClassName","styles","headerImgContainer","open","ref","collapseContainer","onClick","collapseHeader","headerLabel","collapseContent","Component"],"mappings":"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","file":"component---src-pages-freecodecamp-javascript-algorithms-and-data-structures-cash-register-js-b72c20e9ef1283ea6651.js","sourcesContent":["/*\n * Simple Cash Register App.\n * Takes price of product, payment in cash and amount of money in cash inside\n * the register. It calculates the change due to the client, if the transaction\n * can be made or not (depending if the cash in the register is enough for the\n * change) and the new register cash state (how many bills and coins of each\n * denomination are left)\n * */\nimport React from 'react';\nimport {useState} from 'react';\nimport style from './cash-register-app.module.css';\nimport CollapseContainer from './collapse-container';\n\nconst CashRegisterApp = props => {\n  /*\n   */\n\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <div className={style.container}>\n      <div className={style.innerContainer}>\n        <div className={style.innerContainer1}>\n          <h5>Price:</h5>\n          <input type=\"text\" />\n        </div>\n        <div className={style.innerContainer1}>\n          <h5>Payment:</h5>\n          <input type=\"text\" />\n        </div>\n        <div className={style.innerContainer1}>\n          <button>Calculate</button>\n        </div>\n      </div>\n      <div className={style.innerContainer}>\n        <CollapseContainer\n          large={false}\n          styledBorder={false}\n          headerText=\"Cash in register\"\n        />\n      </div>\n      {/* <hr className={style.hr} /> */}\n      <div className={style.innerContainer}></div>\n    </div>\n  );\n};\n\nCashRegisterApp.defaultProps = {};\n\nexport default CashRegisterApp;\n","import React from 'react';\nimport {graphql} from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport Layout from '../../../components/layout';\nimport CashRegisterApp from '../../../components/cash-register-app';\n// import Image from \"../components/image\"\n// import SEO from \"../components/seo\"\n\nconst IndexPage = props => (\n  <Layout pageTitle={'FidelVe | FreeCodeCamp'} headerText=\"Cash Register\">\n    {/* <SEO title=\"Home\" /> */}\n    <div className=\"image-container\">\n      <Img fluid={props.data.fccLogo.childImageSharp.fluid} alt=\" FCC logo\" />\n    </div>\n    <CashRegisterApp />\n  </Layout>\n);\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query {\n    fccLogo: file(relativePath: {eq: \"freecodecamp-logo.png\"}) {\n      childImageSharp {\n        fluid(maxWidth: 400) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport styles from './collapse-container.module.css';\n\n// constant declarations\nconst LARGE_HEIGHT = '58px';\nconst LARGE_FONT = '20px';\nconst SMALL_HEIGHT = '34px';\nconst SMALL_FONT = '15px';\n\nclass CollapseContainer extends React.Component {\n  /*\n   * Props available for this component:\n   *  - headerText: 'default value for the header text',\n   *  - styledBorder: true,\n   *  - borderColor: '#000',\n   *  - large: true,\n   */\n  constructor(props) {\n    super(props);\n    // create ref for <section />\n    this.componentRef = React.createRef();\n\n    // Initial React component state\n    this.state = {\n      isOpen: false,\n    };\n\n    this.baseParams = this.createBaseParams(props);\n  }\n\n  createBaseParams = props => {\n    let params = {\n      initialRender: true,\n      maxHeightWhenCollapsed: '',\n      maxHeightWhenUncollapsed: '',\n    };\n\n    params.maxHeightWhenCollapsed =\n      props.large === true ? LARGE_HEIGHT : SMALL_HEIGHT;\n\n    return params;\n  };\n\n  onHeaderClick = event => {\n    // State change\n    this.setState({isOpen: !this.state.isOpen});\n  };\n\n  calculateInitialInlineStyles = () => {};\n\n  getInlineStyle = () => {\n    // Initializing 'inlineStyles' object\n    let inlineStyles = {\n      main: {\n        // maxHeight\n        // borderColor\n        // borderTop\n      },\n      header: {\n        maxHeight: this.baseParams.maxHeightWhenCollapsed,\n      },\n      headerText: {\n        // fontSize\n      },\n      headerIcon: {\n        // width\n        // height\n        // background-size\n      },\n      content: {},\n    };\n\n    // ********************\n    // these only need to be calculated once, before the first render\n    // TODO: optimize the code, put the calculations in another function and\n    // only do them once\n    // Border Style preferences\n    if (!this.props.styledBorder) {\n      inlineStyles.main.border = 'none';\n    } else {\n      inlineStyles.main.borderTop = `solid 5px ${this.props.borderColor}`;\n    }\n\n    // Header img size calculations\n    let headerImgSize = parseInt(this.baseParams.maxHeightWhenCollapsed) - 4;\n\n    inlineStyles.headerIcon = {\n      width: `${headerImgSize - 8}px`,\n      height: `${headerImgSize - 8}px`,\n      backgroundSize: `${headerImgSize}px ${headerImgSize}px`,\n    };\n\n    // Header label calculations\n    inlineStyles.headerText.fontSize =\n      this.props.large === true ? LARGE_FONT : SMALL_FONT;\n    // ********************\n\n    // Set the maxHeight depending on the state (collapsed/uncollapsed)\n    inlineStyles.main.maxHeight = this.state.isOpen\n      ? this.baseParams.maxHeightWhenUncollapsed\n      : this.baseParams.maxHeightWhenCollapsed;\n\n    return inlineStyles;\n  };\n\n  componentDidUpdate() {}\n  componentDidMount() {\n    // Get the elements from the DOM\n    let contentEl = this.componentRef.current.children[1];\n\n    // Get the computed style of element after being mounted in DOM\n    let contentStyle = getComputedStyle(contentEl);\n\n    // This is the maximum height for the collapse container, it will depend\n    // on the content of itself + and extra margin for handling browser\n    // resize.\n    this.baseParams.maxHeightWhenUncollapsed =\n      parseInt(contentStyle.getPropertyValue('height')) * 2;\n  }\n\n  render() {\n    const inlineStyles = this.getInlineStyle();\n    const iconClassName = this.state.isOpen\n      ? `${styles.headerImgContainer} ${styles.open}`\n      : styles.headerImgContainer;\n\n    return (\n      <section\n        ref={this.componentRef}\n        className={styles.collapseContainer}\n        style={inlineStyles.main}>\n        <header\n          style={inlineStyles.header}\n          onClick={this.onHeaderClick}\n          className={styles.collapseHeader}>\n          <p style={inlineStyles.headerText} className={styles.headerLabel}>\n            {this.props.headerText}\n          </p>\n          <div style={inlineStyles.headerIcon} className={iconClassName}></div>\n        </header>\n        <article style={styles.content} className={styles.collapseContent}>\n          {this.props.children}\n        </article>\n      </section>\n    );\n  }\n}\n\nCollapseContainer.defaultProps = {\n  headerText: 'default value for the header text',\n  styledBorder: true,\n  borderColor: '#000',\n  large: true,\n};\n\nexport default CollapseContainer;\n"],"sourceRoot":""}