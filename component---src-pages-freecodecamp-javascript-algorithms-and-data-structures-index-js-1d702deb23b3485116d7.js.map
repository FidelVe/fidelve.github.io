{"version":3,"sources":["webpack:///./src/components/collapse-container.js","webpack:///./src/components/input-validator.js","webpack:///./src/components/code-container.js","webpack:///./src/pages/freecodecamp/javascript-algorithms-and-data-structures/index.js"],"names":["CollapseContainer","props","onHeaderClick","event","setState","isOpen","state","componentRef","React","createRef","staticState","isInitialRender","headerHeight","contentHeight","uncollapseHeight","componentDidMount","this","current","children","headerEl","contentEl","scrollHeight","render","elementInlineStyle","maxHeight","ref","className","styles","collapseContainer","style","onClick","collapseHeader","headerText","headerImgContainer","open","collapseContent","Component","defaultProps","InputValidator","useState","isValid","setIsValid","inputValue","setInputValue","container","label","value","onChange","e","target","result","validator","evalInput","input","placeholder","type","image","error","maxWidth","display","justifyContent","CodeContainer","dangerouslySetInnerHTML","__html","innerHTML","isPalindrome","string","regex","match","charArr","map","each","toLowerCase","i","Math","floor","length","getHTMLofFileName","fileName","arrayOfFileData","html","Error","IndexPage","queryData","arrayOfCodeData","newArray","node","fileAbsolutePath","substring","push","reshapeCodeData","data","codeBlock","edges","pageTitle","fluid","fccLogo","childImageSharp","alt","id","romanTable","flexcnw","flexrnw","romanThead","letter","query"],"mappings":"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","file":"component---src-pages-freecodecamp-javascript-algorithms-and-data-structures-index-js-1d702deb23b3485116d7.js","sourcesContent":["import React from 'react';\nimport styles from './collapse-container.module.css';\n\nclass CollapseContainer extends React.Component {\n  constructor(props) {\n    // headerText=\"header for the collapsible container\"\n    super(props);\n    this.componentRef = React.createRef();\n    this.state = {\n      isOpen: false,\n    };\n    this.staticState = {\n      isInitialRender: true,\n      // Computed Height of header and content elements inside the collapsible\n      // container\n      headerHeight: false,\n      contentHeight: false,\n      uncollapseHeight: false,\n    };\n  }\n\n  onHeaderClick = event => {\n    this.setState({isOpen: !this.state.isOpen});\n  };\n\n  componentDidMount() {\n    // Get the updated scroll sizes\n    let [headerEl, contentEl] = this.componentRef.current.children;\n\n    if (this.staticState.contentHeight !== contentEl.scrollHeight) {\n      // update the header and content height\n      this.staticState.contentHeight = contentEl.scrollHeight;\n      this.staticState.headerHeight = headerEl.scrollHeight;\n\n      // update the  uncollapsed height. I'm adding 1000px and using\n      // max-height instead of height because if I dont the height doesn't\n      // updates on resize correctly. In the css file the transition is\n      // on max-height instead of height also.\n      this.staticState.uncollapseHeight =\n        this.staticState.contentHeight + this.staticState.headerHeight + 1000;\n\n      if (this.staticState.isInitialRender) {\n        // if this is the initial rendering\n        this.staticState.isInitialRender = false;\n      }\n    }\n  }\n\n  render() {\n    const elementInlineStyle = this.staticState.isInitialRender\n      ? // If this is the first render() am passsing an empty object\n        // The initial height is declared in collapse-container.module.css\n        // This is to ensure that the containers initial state is collapsed\n        {}\n      : // If is not the first render() we check if is collapsed or not\n      // and adjust the height accordingly\n      this.state.isOpen\n      ? {maxHeight: `${this.staticState.uncollapseHeight}px`}\n      : {maxHeight: `${this.staticState.headerHeight}px`};\n\n    return (\n      <section\n        ref={this.componentRef}\n        className={styles.collapseContainer}\n        style={elementInlineStyle}>\n        <header onClick={this.onHeaderClick} className={styles.collapseHeader}>\n          <h3>{this.props.headerText}</h3>\n          {this.state.isOpen ? (\n            <div\n              className={`${styles.headerImgContainer} ${styles.open}`}></div>\n          ) : (\n            <div className={styles.headerImgContainer}></div>\n          )}\n        </header>\n        <article className={styles.collapseContent}>\n          {this.props.children}\n        </article>\n      </section>\n    );\n  }\n}\n\nCollapseContainer.defaultProps = {\n  headerText: 'default value for the header text',\n};\n\nexport default CollapseContainer;\n","/*\n * Responsive validator component.\n * Takes an input and a validator function. depending on the result\n * of validating the input agains the function, it displays a valid or\n * invalid result icon (green check icon or red error icon)\n * */\nimport React from 'react';\nimport {useState} from 'react';\nimport style from './input-validator.module.css';\n\nconst InputValidator = props => {\n  /*\n   * props.validator\n   * props.label\n   */\n\n  const [isValid, setIsValid] = useState(true);\n  const [inputValue, setInputValue] = useState('');\n\n  const evalInput = e => {\n    if (e.target.value !== '') {\n      // Check that e.target.value is not an empty string\n      let result = props.validator(e.target.value);\n      if (typeof result === 'boolean') {\n        // result is a boolean (true or false).\n        setIsValid(result);\n      } else {\n        throw 'Error. result is not a boolean value';\n      }\n    }\n    // Updates input value being displayed\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <div className={style.container}>\n      <h5 className={style.label}>{props.label}:</h5>\n      <input\n        value={inputValue}\n        onChange={e => evalInput(e)}\n        className={style.input}\n        placeholder=\"roma amor\"\n        type=\"text\"\n      />\n      {isValid ? (\n        <div className={style.image} />\n      ) : (\n        <div className={`${style.image} ${style.error}`} />\n      )}\n    </div>\n  );\n};\n\nexport default InputValidator;\n","import React from 'react';\n\nconst style = {\n  maxWidth: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n};\nconst CodeContainer = props => {\n  return (\n    <div\n      style={style}\n      dangerouslySetInnerHTML={{\n        __html: props.innerHTML,\n      }}\n    />\n  );\n};\n\nexport default CodeContainer;\n","import React from 'react';\nimport {graphql} from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport CollapseContainer from '../../../components/collapse-container';\nimport InputValidator from '../../../components/input-validator';\nimport CodeContainer from '../../../components/code-container';\nimport Layout from '../../../components/layout';\nimport style from './index.module.css';\n\n// import Image from \"../components/image\"\n// import SEO from \"../components/seo\"\n\n// variable declaration\nconst PALINDROME_CODE = 'palindrome-checker-code.md';\nconst CAESARS_CODE = 'caesars-cipher-code.md';\nconst REGISTER_CODE = 'cash-register-code.md';\nconst ROMAN_CODE = 'roman-numeral-converter-code.md';\nconst TELEPHONE_CODE = 'telephone-number-validator-code.md';\n\nconst IndexPage = props => {\n  const queryData = reshapeCodeData(props.data.codeBlock.edges);\n  return (\n    <Layout\n      pageTitle=\"FidelVe | FreeCodeCamp\"\n      headerText=\"FreeCodeCamp. JavaScript Algorithms and Data Structure.\">\n      {/* <SEO title=\"Home\" /> */}\n      <div className=\"image-container\">\n        <Img fluid={props.data.fccLogo.childImageSharp.fluid} alt=\" FCC logo\" />\n      </div>\n      <p>\n        <b>JavaScript Algorithms and Data Structures</b> is the second of six\n        courses offered at FreeCodeCamp of which upon completion of its final\n        projects you may earn a <i>FreeCodeCamp Certificate</i>.\n      </p>\n      <p>\n        Starting with the basic sintax of javascript, this course is a great\n        introduction to JavaScript. I do recommend to find tutorials or books\n        online, and read them while you're going through this course, it helped\n        me have a better grasp on the several aspects of JavaScript.\n      </p>\n      <p>\n        By the end of the course you will find several exercises to put into\n        practice everything you have learn so far, and 5 final projects to\n        obtain the <i>FreeCodeCamp Certificate</i>.\n      </p>\n      <p>\n        I decided to create this page as a way to showcase my code answers to\n        this project, if you are currently going through this part of the FCC\n        curriculum I recommend that you don't see my answers and do the projects\n        on your own, the most important part of doing the FCC is to learn of\n        your mistakes and find the answers by yourself, the process of making\n        mistakes and learning from them is the most important part of learning,\n        not only how to code but learning anything in life, so if you truly want\n        to learn, don't cheat, you will only be doing a disservice to yourself.\n      </p>\n      <h2>FreeCodeCamp JavaScript's final project</h2>\n      <CollapseContainer headerText=\"Palindrome Checker\">\n        <p>\n          A palindrome is a word or sentence that's spelled the same way both\n          forward and backward, ignoring punctuation, case, and spacing.\n        </p>\n        <p>\n          In this project, you are tasked with creating and algorithm that can\n          detect if a word (or phrase) is a palindrome or not.\n        </p>\n        <p>\n          Because we need to compare character by character, not including\n          punctuation, case and spacing, we need to use regular expressions to\n          match all the correct characters, and add all of this into an array\n          for easy comparison later.\n        </p>\n        <p>\n          After having your array with all the correct characters, the rest is\n          just an iteration where you compare each character in their respective\n          position at the beginning and end of the array, stoping at the middle.\n        </p>\n        <CodeContainer\n          innerHTML={getHTMLofFileName(PALINDROME_CODE, queryData)}\n        />\n        <h4>Testing the code.</h4>\n        <p>\n          Heres a list of words and phrases you can use to test the algorithm.\n        </p>\n        <ul>\n          <li>\n            <b>\"eye\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"_eye\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"race car\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"not a palindrome\"</b> should return negative.\n          </li>\n          <li>\n            <b>\"A man, a plan, a canal. Panama\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"never odd or even\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"nope\"</b> should return negative.\n          </li>\n          <li>\n            <b>\"almostomla\"</b> should return negative.\n          </li>\n          <li>\n            <b>\"My age is 0, 0 si ega ym.\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"1 eye for of 1 eye.\"</b> should return negative.\n          </li>\n          <li>\n            <b>\"0_0 (: /-\\ :) 0-0\"</b> should return positive.\n          </li>\n          <li>\n            <b>\"five|\\_/|four\"</b> should return negative.\n          </li>\n        </ul>\n        <InputValidator validator={isPalindrome} label=\"Palindrome Test\" />\n      </CollapseContainer>\n      <CollapseContainer headerText=\"Roman Numeral Converter\">\n        <p>\n          For this project you are asked to create an algorithm that converts\n          decimal numbers into the roman numeral system.\n        </p>\n        <p>\n          The first thing that we need to do, is understand how roman numerals\n          are written. The numbers in this system are represented by a\n          combination of letters from the Latin alphabet.\n        </p>\n        <div id={style.romanTable} className={style.flexcnw}>\n          <div className={style.flexrnw}>\n            <span className={style.romanThead}>Symbol</span>\n            {['I', 'V', 'X', 'L', 'C', 'D', 'M'].map(letter => (\n              <span>{letter}</span>\n            ))}\n          </div>\n          <div className={style.flexrnw}>\n            <span className={style.romanThead}>Value</span>\n            {['1', '5', '10', '50', '100', '500', '1000'].map(value => (\n              <span>{value}</span>\n            ))}\n          </div>\n        </div>\n        <p>\n          Now that we now the symbols and their value in the decimal system, how\n          do we used them?. The correct way to express quantities in the roman\n          numeral system is to replace from the top down, find the highest\n          valued symbol, use it and substract the value to the total and repeat\n          until zero is reached.\n        </p>\n        <p>\n          For example, the correct way to express <b>1500</b> in the roman\n          system would be <b>MD</b>, instead of <b>DDD</b>.\n        </p>\n        <CodeContainer innerHTML={getHTMLofFileName(ROMAN_CODE, queryData)} />\n        <h4>Testing the code.</h4>\n        <p>Use the following values to test the algorithm.</p>\n        <ul>\n          <li>Decimal 2, should return \"II\".</li>\n          <li>Decimal 4, should return \"IV\".</li>\n          <li>Decimal 29, should return \"XXIX\".</li>\n          <li>Decimal 83, should return \"LXXXIII\".</li>\n          <li>Decimal 97, should return \"XCVII\".</li>\n          <li>Decimal 649, should return \"DCXLIX\".</li>\n          <li>Decimal 798, should return \"DCCXCVIII\".</li>\n          <li>Decimal 891, should return \"DCCCXCI\".</li>\n          <li>Decimal 2014, should return \"MMXIV\".</li>\n          <li>Decimal 3999, should return \"MMMCMXCIX\".</li>\n        </ul>\n      </CollapseContainer>\n      <CollapseContainer headerText=\"Caesars Cipher\">\n        <p>\n          In cryptography, a cipher is an algorithm for performing encryption or\n          decryption, this algorithm substitutes the characters in a string to\n          transform them into something else for the purpose of protecting the\n          original string from being understood by unwanted people.\n        </p>\n        <p>\n          Caesars cipher is one of the simplest and most widely know encryption\n          techniques. It is a simple substitution cipher in which each letter in\n          a string is replaced by a letter some fixed number of positions down\n          the alphabet.\n        </p>\n        <p>\n          For this project you are asked to write an algorithm capable of\n          implementing ROT13, a type of caesar cipher that replaces every\n          character in a string with the letter 13 positions up in the alphabet\n          from the position of that character.\n        </p>\n        <CodeContainer innerHTML={getHTMLofFileName(CAESARS_CODE, queryData)} />\n        <h4>Testing the code.</h4>\n        <p>Use the following to test the algorithm</p>\n        <ul>\n          <li>\"SERR PBQR PNZC\" should decode to FREE CODE CAMP.</li>\n          <li>\"SERR CVMMN!\" should decode to FREE PIZZA!.</li>\n          <li>\"SERR YBIR?\" should decode to FREE LOVE?.</li>\n          <li>\n            \"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\" should decode to THE\n            QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\n          </li>\n        </ul>\n      </CollapseContainer>\n      <CollapseContainer headerText=\"Telephone Number Validator\">\n        <p>\n          For this next project you are given a string representing a phone\n          number and you should validate it.\n        </p>\n        <p>\n          The input string should be a valid US phone number, the following\n          examples are valid formats for US numbers.\n        </p>\n        <ul>\n          <li>555-555-5555</li>\n          <li>(555)555-5555</li>\n          <li>(555) 555-5555</li>\n          <li>555 555 5555</li>\n          <li>5555555555</li>\n          <li>1 555 555 5555</li>\n        </ul>\n        <CodeContainer\n          innerHTML={getHTMLofFileName(TELEPHONE_CODE, queryData)}\n        />\n        <h4>Testing the code.</h4>\n        <p>Use the following to test the algorithm</p>\n        <ul>\n          <li>\"1 555-555-5555\" should return true.</li>\n          <li>\"1 (555) 555-5555\" should return true.</li>\n          <li>\"5555555555\" should return true.</li>\n          <li>\"555-555-5555\" should return true.</li>\n          <li>\"(555)555-5555\" should return true.</li>\n          <li>\"1(555)555-5555\" should return true.</li>\n          <li>\"555-5555\" should return false.</li>\n          <li>\"5555555\" should return false.</li>\n          <li>\"1 555)555-5555\" should return false.</li>\n          <li>\"1 555 555 5555\" should return true.</li>\n          <li>\"1 456 789 4444\" should return true.</li>\n          <li>\"123**&!!asdf#\" should return false.</li>\n          <li>\"55555555\" should return false.</li>\n          <li>\"(6054756961)\" should return false</li>\n          <li>\"2 (757) 622-7382\" should return false.</li>\n          <li>\"0 (757) 622-7382\" should return false.</li>\n          <li>\"-1 (757) 622-7382\" should return false</li>\n          <li>\"2 757 622-7382\" should return false.</li>\n          <li>\"10 (757) 622-7382\" should return false.</li>\n          <li>\"27576227382\" should return false.</li>\n          <li>\"(275)76227382\" should return false.</li>\n          <li>\"2(757)6227382\" should return false.</li>\n          <li>\"2(757)622-7382\" should return false.</li>\n          <li>\"555)-555-5555\" should return false.</li>\n          <li>\"(555-555-5555\" should return false.</li>\n          <li>\"(555)5(55?)-5555\" should return false.</li>\n        </ul>\n      </CollapseContainer>\n      <CollapseContainer headerText=\"Cash Register\">\n        <p>\n          For this last project you're tasked with creating a piece of program\n          that will simulate a cash register.\n        </p>\n        <p>\n          You have to write a function that takes purchase price as the first\n          argument (price), payment as the second argument (cash), and\n          cash-in-drawer (cid) as the third argument.\n        </p>\n        <p>\n          After taking those inputs, you need to calculate how much change to\n          return taking into account the price of the product, the amount of\n          cash the client is giving you and the amount of cash the register has.\n        </p>\n        <p>\n          You should always return an object with a \"status\" and a \"change\" key.\n          The posible outcomes are as follow:\n        </p>\n        <ul>\n          <li>\n            If cash in the drawer is less than the change due, or if you cannot\n            return the exact change, the output should be{' '}\n            <code>\n              {'{'}status: \"INSUFFICIENT_FUNDS\", change: []{'}'}\n            </code>\n          </li>\n          <li>\n            If the amount of \"change\" to return is equal to the amount of cash\n            in the register, the \"status\" key should return \"CLOSED\" and the\n            change array sorted from highest to lowest with the amounts of bills\n            and coins to return.\n          </li>\n          <li>\n            If the change to return is lower than the amount of cash in the\n            register, and the exact amount can be returned, the \"status\" key\n            should return with a value of \"OPEN\", and as in the last case, the\n            change array sorted from highest to lowest.\n          </li>\n        </ul>\n        <CodeContainer\n          innerHTML={getHTMLofFileName(REGISTER_CODE, queryData)}\n        />\n        <h4>Testing the code.</h4>\n      </CollapseContainer>\n    </Layout>\n  );\n};\n\nfunction isPalindrome(string) {\n  // Evaluate if input string is a palindrome or not\n  // returns either true or false\n\n  let regex = /[^\\W_]/g;\n\n  if (string.match(regex) !== null) {\n    // If the result of evaluating the regular expression into the string\n    // is not null\n    let charArr = string.match(regex).map(each => each.toLowerCase());\n    for (let i = 0; i < Math.floor(charArr.length / 2); i++) {\n      if (charArr[i] !== charArr[charArr.length - 1 - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // if the input is not a valid string return false\n  return false;\n}\n\nfunction reshapeCodeData(arrayOfCodeData) {\n  // Reshapes the data obtained by the graphql query\n  let newArray = [];\n  let regex = /\\/[^/]+.md/;\n\n  for (let node of arrayOfCodeData) {\n    // Extracts the file name from the absolute path\n    let fileName = node.node.fileAbsolutePath.match(regex)[0].substring(1);\n    // HTML content\n    let html = node.node.html;\n    newArray.push({fileName: fileName, html: html});\n  }\n  return newArray;\n}\n\nfunction getHTMLofFileName(fileName, arrayOfFileData) {\n  // Returns the html content of the given fileName in an array of shape\n  // [\n  //  { fileName: \"file.md\", html: \"<p>html Code</p>},\n  //  {...}\n  // ]\n  for (let each of arrayOfFileData) {\n    if (each.fileName === fileName) {\n      return each.html;\n    }\n  }\n  // If no file is found with name fileName throws error\n  throw Error(`no file named ${fileName} found`);\n}\nexport default IndexPage;\n\nexport const query = graphql`\n  query {\n    fccLogo: file(relativePath: {eq: \"freecodecamp-logo.png\"}) {\n      childImageSharp {\n        fluid(maxWidth: 400) {\n          ...GatsbyImageSharpFluid_noBase64\n        }\n      }\n    }\n    codeBlock: allMarkdownRemark(\n      filter: {fileAbsolutePath: {regex: \"/.+code.md/\"}}\n    ) {\n      edges {\n        node {\n          fileAbsolutePath\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}